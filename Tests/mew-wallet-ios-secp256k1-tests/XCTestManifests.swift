#if !canImport(ObjectiveC)
import XCTest

extension Array_UInt8_SecRandomCopyBytes_Tests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__Array_UInt8_SecRandomCopyBytes_Tests = [
        ("testSecRandomError", testSecRandomError),
        ("testSecRandomLength", testSecRandomLength),
        ("testSecRandomUniqueness", testSecRandomUniqueness),
    ]
}

extension Data_Sign_Tests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__Data_Sign_Tests = [
        ("testSign", testSign),
    ]
}

extension secp256k1_context_Convenient_Tests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__secp256k1_context_Convenient_Tests = [
        ("testSignContext", testSignContext),
    ]
}

extension secp256k1_ecdsa_recoverable_signature_Data_Tests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__secp256k1_ecdsa_recoverable_signature_Data_Tests = [
        ("testInvalidSignatureSize", testInvalidSignatureSize),
        ("testRawPropertyConversion", testRawPropertyConversion),
        ("testSignatureSerialization", testSignatureSerialization),
    ]
}

extension secp256k1_ecdsa_recoverable_signature_PublicKey_Tests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__secp256k1_ecdsa_recoverable_signature_PublicKey_Tests = [
        ("testPublicKeyRecovery", testPublicKeyRecovery),
        ("testPublicKeyRecoveryInvalidHashSize", testPublicKeyRecoveryInvalidHashSize),
    ]
}

extension secp256k1_prvkey_Verify_Tests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__secp256k1_prvkey_Verify_Tests = [
        ("testInvalidPrivateKey", testInvalidPrivateKey),
        ("testValidPrivateKey", testValidPrivateKey),
    ]
}

extension secp256k1_pubkey_Data {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__secp256k1_pubkey_Data = [
        ("testInvalidPublicKey", testInvalidPublicKey),
        ("testPubkeyToDataConversion", testPubkeyToDataConversion),
        ("testValidPublicKey", testValidPublicKey),
    ]
}

extension secp256k1_pubkey_Multiply_Tests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__secp256k1_pubkey_Multiply_Tests = [
        ("testPubkeyMulPrvkey", testPubkeyMulPrvkey),
    ]
}

extension secp256k1_pubkey_Serialization_Tests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__secp256k1_pubkey_Serialization_Tests = [
        ("testPubkeySerialization", testPubkeySerialization),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(Array_UInt8_SecRandomCopyBytes_Tests.__allTests__Array_UInt8_SecRandomCopyBytes_Tests),
        testCase(Data_Sign_Tests.__allTests__Data_Sign_Tests),
        testCase(secp256k1_context_Convenient_Tests.__allTests__secp256k1_context_Convenient_Tests),
        testCase(secp256k1_ecdsa_recoverable_signature_Data_Tests.__allTests__secp256k1_ecdsa_recoverable_signature_Data_Tests),
        testCase(secp256k1_ecdsa_recoverable_signature_PublicKey_Tests.__allTests__secp256k1_ecdsa_recoverable_signature_PublicKey_Tests),
        testCase(secp256k1_prvkey_Verify_Tests.__allTests__secp256k1_prvkey_Verify_Tests),
        testCase(secp256k1_pubkey_Data.__allTests__secp256k1_pubkey_Data),
        testCase(secp256k1_pubkey_Multiply_Tests.__allTests__secp256k1_pubkey_Multiply_Tests),
        testCase(secp256k1_pubkey_Serialization_Tests.__allTests__secp256k1_pubkey_Serialization_Tests),
    ]
}
#endif
